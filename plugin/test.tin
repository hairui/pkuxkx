#alias {path.test} {
	#list test_path create {
		s;w;w;w;w;n;n;s;s;w;w;w;w;e;e;e;e;e;e;e;e;s;n;e;n;s;s;n;e;n;e;w;n;w;n;s;e;e;w;n;w;e;e;
		e;w;w;n;n;n;n;n;n;n;n;n;s;s;s;s;s;s;s;s;s;s;s;s;w;e;e;w;s;w;e;s;w;e;e;w;s;s;s;s;e;w;s;s;
		n;n;n;n;n;n;n;n;n;e;n;s;e;sw;s;w;e;e;w;n;ne;n;n;w;e;s;s;e;s;n;e;e;se;e;e;w;w;nw;e;n;s;w;w;w;w;w;w;w;w;n;
	};
	
	#list test_path size test_path_size;
	#var test_path_index 0;
	#ticker {test_walk} {
		#math test_path_index ${test_path_index}+1;
		#if {${test_path_index} > ${test_path_size}} {
			#untick {test_walk};
		};
		#else {
			#list test_path get ${test_path_index} test_path_next;
			${test_path_next};
		};
	} {1};
};


#alias {hb.duobi} {
	#action {get_exits: done} {
		#unaction {get_exits: done};
		#class hb.duobi.inner open;
		#action {^ƒ„Ã”≈‹ ß∞‹} {
			#unaction {^ƒ„Ã”≈‹ ß∞‹};
			#undelay {hb_delay};
			#class hb.duobi.inner kill;
			on_truce {
				hb.resume;
			};
		};
		#list exits_list get 1 duobi_exit;
		#if {"${duobi_exit}" == "up"} {
			#list exits_list get 2 duobi_exit;			
		};

		#delay {3} {
			#5 halt;
			#showme duobi: ${duobi_exit};
			on_unbusy {
				${duobi_exit};
			};
		};
		
		#delay {hb_delay} {
			#unaction {^ƒ„Ã”≈‹ ß∞‹};
			#var duobi_opposite_exit @opposite{${duobi_exit}};
			#showme duobi: opposite of ${duobi_exit} is ${duobi_opposite_exit};
			${duobi_opposite_exit};
			#class hb.duobi.inner kill;
			hb.resume;
		} {10};
		#class hb.duobi.inner close;
	};
	#5 halt;
	get_exits;
};
